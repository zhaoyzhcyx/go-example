package main

import (
	"fmt"
	"math/big"
)

//sum int array
func sumArray(x []int) int64 {
	var r int64
	
	for _, v := range x {
		r = r + int64(v)
	}	

	return r
}

//Fibonacci implemented by Go map with unit64
var m = make(map[int]uint64)
func fibonacciMap(x uint) uint64 {
	var r uint64

	m[0], m[1] = m[1], m[0] + m[1]

	if x <=2 {
		r = uint64(1)
	} else if x == 3 {
		r = m[0] +m[1]
	} 

	if r > 0 {
		m[0], m[1] = uint64(0), uint64(1)
		return r
	}

	return fibonacciMap(x-uint(1))
}

//Fibonacci implemented by tail recursion with uint64
func fibonacciInt64(x uint) uint64 {
	var fib func(a uint64, b uint64, x uint) uint64
	
	fib = func(a uint64, b uint64, x uint) uint64 {
		if x <= uint(1) {
			return uint64(a)
		} else {
			return fib(b, a+b, x-uint(1))
		}
	}

    return fib(1,1,x)
}

//Fibonacci implemented by tail recursion with big.int
func fibonacciTail(x uint) *big.Int {

	if x<=1 {
		return big.NewInt(int64(x))
	}
	// var fmap = make(map[uint]uint64)

	var fib func(a *big.Int, b *big.Int, x uint) *big.Int
	
	fib = func(a *big.Int, b *big.Int, x uint) *big.Int {
		if x <= uint(1) {
			return a
		} else {
			// fmt.Println(a.Add(a,b))
			return fib(b, a.Add(a,b) , x-uint(1))
		}
	}

    return fib(big.NewInt(1),big.NewInt(1),x)
}

func main() {
	//Test 1. Write a program or function to sum the following array of number:
	test1Input := []int{81, 87, 47, 59, 81, 18, 25, 40, 56, 0, 94, 11, 62, 89, 28, 74, 11, 45, 37, 6, 95, 66, 28, 58, 47, 47, 87, 88, 90, 15, 41, 8, 87, 31, 29, 56, 37, 31, 85, 26, 13, 90, 94, 63, 33, 47, 78, 24, 59, 53, 57, 21, 89, 99, 0, 5, 88, 38, 3, 55, 51, 10, 5, 56, 66, 28, 61, 2, 83, 46, 63, 76, 2, 18, 47, 94, 77, 63, 96, 20, 23, 53, 37, 33, 41, 59, 33, 43, 91, 2, 78, 36, 46, 7, 40, 3, 52, 43, 5, 98, 25, 51, 15, 57, 87, 10, 10, 85, 90, 32, 98, 53, 91, 82, 84, 97, 67, 37, 71, 94, 26, 2, 81, 79, 66, 70, 93, 86, 19, 81, 52, 75, 85, 10, 87, 49, 28, 18, 84, 3, 24, 47, 12, 32, 16, 39, 40, 86, 51, 76, 40, 51, 44, 64, 5, 83, 1, 90, 2, 58, 67, 31, 78, 54, 22, 23, 42, 8, 43, 68, 66, 10, 35, 40, 4, 62, 57, 15, 71, 39, 30, 13, 0, 59, 20, 83, 70, 84, 47, 10, 65, 62, 29, 20, 48, 56, 95, 66, 0, 56, 29, 92, 31, 77, 86, 20, 99, 62, 47, 92, 88, 11, 3, 88, 18, 56, 19, 7, 57, 52, 75, 81, 53, 95, 17, 93, 70, 96, 86, 32, 20, 60, 22, 29, 61, 60, 20, 79, 54, 64, 60, 51, 81, 57, 16, 0, 39, 37, 33, 61, 4, 85, 9, 15, 19, 14, 40, 62, 40, 0, 84, 73, 35, 43, 21, 90, 74, 69, 70, 36, 38, 72, 44, 95, 74, 37, 24, 93, 6, 48, 52, 20, 22, 71, 17, 51, 65, 82, 79, 92, 29, 31, 21, 55, 11, 43, 53, 66, 59, 67, 8, 8, 28, 53, 74, 84, 75, 74, 6, 37, 86, 67, 14, 58, 59, 46, 23, 24, 87, 57, 74, 39, 31, 46, 83, 28, 16, 26, 77, 12, 36, 51, 5, 62, 89, 98, 87, 30, 9, 28, 59, 61, 2, 18, 45, 71, 53, 40, 20, 81, 5, 76, 9, 66, 56, 95, 80, 34, 77, 67, 78, 75, 93, 80, 8, 31, 65, 58, 84, 42, 23, 62, 73, 72, 53, 58, 27, 96, 48, 13, 31, 74, 6, 40, 31, 32, 77, 2, 54, 83, 30, 86, 87, 62, 4, 21, 93, 98, 56, 65, 22, 45, 94, 6, 99, 24, 20, 44, 59, 7, 24, 57, 53, 74, 75, 40, 89, 14, 45, 39, 81, 31, 51, 85, 29, 3, 95, 92, 72, 75, 77, 62, 73, 17, 59, 7, 80, 5, 6, 74, 44, 23, 94, 22, 33, 74, 10, 30, 95, 14, 23, 50, 9, 77, 45, 71, 8, 98, 34, 79, 54, 21, 87, 26, 10, 21, 67, 1, 49, 88, 20, 74, 1, 40, 73, 96, 66, 75, 10, 72, 13, 14, 59, 25, 46, 21, 44, 63, 36, 87, 88, 23, 25, 26, 19, 0, 14, 30, 76, 0, 51, 34, 19, 66, 13, 45, 41, 42, 39, 94, 21, 74, 1, 50, 85, 88, 64, 60, 16, 19, 82, 16, 13, 16, 22, 1, 55, 77, 63, 17, 58, 32, 79, 75, 33, 40, 27, 34, 52, 28, 37, 47, 69, 12, 46, 9, 4, 56, 14, 89, 23, 42, 64, 39, 30, 19, 53, 60, 94, 85, 21, 13, 1, 28, 57, 84, 62, 83, 21, 50, 15, 40, 92, 42, 91, 98, 1, 7, 12, 95, 16, 52, 83, 55, 69, 40, 94, 98, 90, 17, 82, 14, 70, 82, 68, 76, 26, 96, 25, 68, 62, 43, 51, 21, 13, 9, 93, 70, 37, 86, 41, 90, 98, 85, 1, 58, 18, 92, 35, 15, 81, 48, 56, 17, 74, 99, 73, 51, 61, 60, 92, 24, 14, 18, 63, 35, 48, 50, 40, 52, 90, 66, 99, 60, 94, 10, 51, 66, 1, 22, 60, 34, 13, 62, 98, 17, 93, 40, 53, 18, 1, 6, 88, 71, 77, 42, 17, 7, 84, 50, 7, 22, 45, 35, 48, 30, 4, 62, 52, 75, 14, 7, 53, 1, 73, 1, 95, 50, 45, 27, 99, 38, 99, 15, 75, 43, 40, 60, 39, 93, 51, 12, 78, 81, 6, 79, 15, 85, 11, 48, 14, 93, 36, 55, 60, 36, 6, 83, 28, 1, 12, 79, 63, 43, 87, 32, 23, 23, 25, 90, 77, 1, 1, 47, 8, 7, 59, 14, 96, 52, 64, 88, 37, 0, 92, 38, 95, 97, 44, 78, 8, 27, 63, 54, 52, 11, 1, 38, 72, 88, 80, 41, 71, 41, 14, 27, 36, 38, 84, 44, 37, 98, 23, 94, 95, 62, 35, 79, 7, 28, 82, 95, 56, 78, 89, 72, 41, 15, 2, 64, 20, 89, 3, 4, 0, 60, 79, 87, 15, 85, 98, 63, 25, 53, 51, 80, 32, 62, 32, 58, 64, 38, 49, 88, 9, 16, 56, 87, 72, 8, 44, 33, 46, 43, 1, 73, 44, 5, 0, 6, 55, 63, 78, 91, 61, 40, 12, 78, 44, 36, 12, 83, 11, 35, 71, 99, 58, 4, 1, 83, 16, 81, 96, 56, 89, 16, 17, 74, 77, 3, 66, 61, 84, 23, 29, 11, 83, 4, 50, 62, 91, 47, 10, 37, 64, 73, 57, 3, 81, 38, 17, 64, 76, 66, 35, 5, 85, 5, 79, 41, 63, 4, 19, 47, 83, 36, 10, 3, 30, 47, 7, 72, 4, 98, 91, 25, 37, 72, 43, 29, 4, 14, 89, 18, 92, 58, 50, 80, 78, 17, 25, 13, 69, 35, 10, 52, 71, 72, 9, 76, 87, 88, 46, 18, 33, 18, 83, 66, 93, 74, 21, 73, 48, 46, 4, 54, 63, 60, 91, 59, 32, 97, 99, 19, 99, 25, 83, 78, 30, 57, 17, 2, 22, 31, 72, 28, 82, 5, 18, 85, 93, 48, 25, 16, 71, 15, 76, 81, 94, 41, 9, 64, 58, 42, 90, 37, 21, 44, 11, 13, 24, 11, 33, 42, 82, 18, 26, 70, 70, 62}
	fmt.Println("Test 1 Result:", sumArray(test1Input))

	//Test 2. Write a program or function that generates and outputs the first 6 Fibonacci numbers. The only caveat here is that you MUST use recursion. 
			// Fibonacci(1) = 1
			// Fibonacci(2) = 1
			// Fibonacci(3) = 2
			// Fibonacci(4) = 3
			// Fibonacci(5) = 5
			// Fibonacci(6) = 8
	test2Input := 100
	fmt.Println("Test 2 Result:")
	for i := 1; i<=test2Input; i++ {
		fmt.Printf("Fibonacci(%v)=%v\n", i, fibonacciMap(uint(i)))
	}
}